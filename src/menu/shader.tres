[gd_resource type="ShaderMaterial" load_steps=16 format=2]

[sub_resource type="VisualShaderNodeScalarFunc" id=2]
function = 0

[sub_resource type="VisualShaderNodeScalarFunc" id=3]
function = 0

[sub_resource type="VisualShaderNodeScalarFunc" id=4]
function = 0

[sub_resource type="VisualShaderNodeVectorCompose" id=5]

[sub_resource type="VisualShaderNodeVectorOp" id=6]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 1, 1, 1 ) ]

[sub_resource type="VisualShaderNodeVectorOp" id=7]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 2, 2, 2 ) ]
operator = 3

[sub_resource type="VisualShaderNodeVectorOp" id=8]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 10, 10, 10 ) ]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=9]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarConstant" id=10]
constant = 0.75

[sub_resource type="VisualShaderNodeScalarOp" id=11]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=12]
operator = 2

[sub_resource type="VisualShaderNodeScalarConstant" id=13]
constant = 2.4

[sub_resource type="VisualShaderNodeScalarConstant" id=14]
constant = 3.35

[sub_resource type="VisualShaderNodeScalarOp" id=15]
operator = 2

[sub_resource type="VisualShader" id=16]
code = "shader_type canvas_item;



void vertex() {
// Output:0

}

void fragment() {
// Input:3
	float n_out3p0;
	n_out3p0 = TIME;

// Scalar:4
	float n_out4p0;
	n_out4p0 = 0.750000;

// ScalarOp:5
	float n_out5p0;
	n_out5p0 = n_out3p0 * n_out4p0;

// ScalarFunc:10
	float n_out10p0;
	n_out10p0 = sin(n_out5p0);

// Scalar:7
	float n_out7p0;
	n_out7p0 = 2.400000;

// ScalarOp:6
	float n_out6p0;
	n_out6p0 = n_out3p0 * n_out7p0;

// ScalarFunc:11
	float n_out11p0;
	n_out11p0 = sin(n_out6p0);

// Scalar:8
	float n_out8p0;
	n_out8p0 = 3.350000;

// ScalarOp:9
	float n_out9p0;
	n_out9p0 = n_out3p0 * n_out8p0;

// ScalarFunc:12
	float n_out12p0;
	n_out12p0 = sin(n_out9p0);

// VectorCompose:13
	vec3 n_out13p0;
	n_out13p0 = vec3( n_out10p0 , n_out11p0 , n_out12p0 );

// VectorOp:14
	vec3 n_in14p1 = vec3(1.00000,1.00000,1.00000);
	vec3 n_out14p0;
	n_out14p0 = n_out13p0 + n_in14p1;

// VectorOp:15
	vec3 n_in15p1 = vec3(2.00000,2.00000,2.00000);
	vec3 n_out15p0;
	n_out15p0 = n_out14p0 / n_in15p1;

// VectorOp:16
	vec3 n_in16p1 = vec3(10.00000,10.00000,10.00000);
	vec3 n_out16p0;
	n_out16p0 = n_out15p0 * n_in16p1;

// Output:0
	COLOR.rgb = n_out16p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -974.25, 10.25 )
mode = 1
flags/light_only = false
nodes/fragment/3/node = SubResource( 9 )
nodes/fragment/3/position = Vector2( -700, 140 )
nodes/fragment/4/node = SubResource( 10 )
nodes/fragment/4/position = Vector2( -680, 280 )
nodes/fragment/5/node = SubResource( 11 )
nodes/fragment/5/position = Vector2( -480, 240 )
nodes/fragment/6/node = SubResource( 12 )
nodes/fragment/6/position = Vector2( -480, 360 )
nodes/fragment/7/node = SubResource( 13 )
nodes/fragment/7/position = Vector2( -680, 360 )
nodes/fragment/8/node = SubResource( 14 )
nodes/fragment/8/position = Vector2( -680, 480 )
nodes/fragment/9/node = SubResource( 15 )
nodes/fragment/9/position = Vector2( -480, 480 )
nodes/fragment/10/node = SubResource( 2 )
nodes/fragment/10/position = Vector2( -240, 300 )
nodes/fragment/11/node = SubResource( 3 )
nodes/fragment/11/position = Vector2( -238.25, 414.75 )
nodes/fragment/12/node = SubResource( 4 )
nodes/fragment/12/position = Vector2( -240, 520 )
nodes/fragment/13/node = SubResource( 5 )
nodes/fragment/13/position = Vector2( -20, 400 )
nodes/fragment/14/node = SubResource( 6 )
nodes/fragment/14/position = Vector2( 200, 380 )
nodes/fragment/15/node = SubResource( 7 )
nodes/fragment/15/position = Vector2( -20, 240 )
nodes/fragment/16/node = SubResource( 8 )
nodes/fragment/16/position = Vector2( 180, 200 )
nodes/fragment/connections = PoolIntArray( 3, 0, 5, 0, 4, 0, 5, 1, 7, 0, 6, 1, 8, 0, 9, 1, 3, 0, 6, 0, 3, 0, 9, 0, 5, 0, 10, 0, 6, 0, 11, 0, 9, 0, 12, 0, 10, 0, 13, 0, 11, 0, 13, 1, 12, 0, 13, 2, 13, 0, 14, 0, 14, 0, 15, 0, 15, 0, 16, 0, 16, 0, 0, 0 )

[resource]
shader = SubResource( 16 )
