[gd_scene load_steps=57 format=2]

[ext_resource path="res://assets/sprites/block.png" type="Texture" id=1]
[ext_resource path="res://src/block/block.gd" type="Script" id=2]
[ext_resource path="res://assets/sprites/block_n.png" type="Texture" id=3]
[ext_resource path="res://assets/lights/basic_light.jpg" type="Texture" id=4]
[ext_resource path="res://assets/particles/spark.png" type="Texture" id=5]
[ext_resource path="res://assets/particles/dust.png" type="Texture" id=6]
[ext_resource path="res://assets/sounds/explosion_test_1.wav" type="AudioStream" id=7]
[ext_resource path="res://assets/sounds/block_retract.wav" type="AudioStream" id=8]
[ext_resource path="res://assets/sounds/block_move.wav" type="AudioStream" id=9]

[sub_resource type="VisualShaderNodeVectorOp" id=1]

[sub_resource type="VisualShaderNodeVectorCompose" id=2]

[sub_resource type="VisualShaderNodeVectorCompose" id=3]

[sub_resource type="OpenSimplexNoise" id=4]
seed = 1
period = 48.0

[sub_resource type="NoiseTexture" id=5]
seamless = true
noise = SubResource( 4 )

[sub_resource type="VisualShaderNodeTexture" id=6]
output_port_for_preview = 0
texture = SubResource( 5 )

[sub_resource type="VisualShaderNodeVectorOp" id=7]

[sub_resource type="VisualShaderNodeVectorSmoothStep" id=8]
output_port_for_preview = 0
default_input_values = [ 0, Vector3( 0.95, 0.95, 0.95 ), 1, Vector3( 1.9, 1.9, 1.9 ), 2, Vector3( 0, 0, 0 ) ]

[sub_resource type="VisualShaderNodeScalarOp" id=9]
default_input_values = [ 0, 0.0, 1, -1.0 ]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=10]
input_name = "texture"

[sub_resource type="VisualShaderNodeTexture" id=11]
source = 2

[sub_resource type="VisualShaderNodeInput" id=12]
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeVectorScalarMix" id=13]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0, 0, 0 ), 2, 0.5 ]

[sub_resource type="VisualShaderNodeScalarOp" id=14]

[sub_resource type="VisualShaderNodeVectorOp" id=15]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 1.2, 1.2, 1.2 ) ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=16]
default_input_values = [ 0, 2.0, 1, 0.3 ]

[sub_resource type="VisualShaderNodeScalarClamp" id=17]

[sub_resource type="OpenSimplexNoise" id=18]
period = 48.0

[sub_resource type="NoiseTexture" id=19]
seamless = true
noise = SubResource( 18 )

[sub_resource type="VisualShaderNodeTexture" id=20]
output_port_for_preview = 0
texture = SubResource( 19 )

[sub_resource type="VisualShaderNodeInput" id=21]
output_port_for_preview = 0
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeVectorDecompose" id=22]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeCompare" id=23]
default_input_values = [ 0, 0.0, 1, 0.34, 2, 1e-05 ]
function = 2

[sub_resource type="VisualShaderNodeCompare" id=24]
default_input_values = [ 0, 0.0, 1, 0.6, 2, 1e-05 ]
function = 4

[sub_resource type="VisualShaderNodeScalarOp" id=25]
operator = 2

[sub_resource type="VisualShaderNodeScalarSwitch" id=26]

[sub_resource type="VisualShaderNodeScalarSwitch" id=27]

[sub_resource type="VisualShaderNodeScalarOp" id=28]
operator = 2

[sub_resource type="VisualShaderNodeCompare" id=29]
output_port_for_preview = 0
default_input_values = [ 0, 0.1, 1, 0.97, 2, 1e-05 ]
function = 4

[sub_resource type="VisualShaderNodeScalarSwitch" id=30]

[sub_resource type="VisualShaderNodeScalarOp" id=31]
operator = 2

[sub_resource type="VisualShaderNodeBooleanUniform" id=32]
uniform_name = "Limit"

[sub_resource type="VisualShaderNodeScalarSwitch" id=33]
default_input_values = [ 0, false, 1, 1.0, 2, 1.0 ]

[sub_resource type="VisualShaderNodeScalarClamp" id=34]

[sub_resource type="VisualShaderNodeVectorOp" id=35]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeInput" id=36]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarUniform" id=37]
uniform_name = "Speed"

[sub_resource type="VisualShaderNodeScalarOp" id=38]
operator = 2

[sub_resource type="VisualShader" id=39]
code = "shader_type canvas_item;
uniform float Speed;
uniform sampler2D tex_frg_4;
uniform sampler2D tex_frg_13;
uniform bool Limit;



void vertex() {
// Output:0

}

void fragment() {
// ScalarUniform:8
	float n_out8p0 = Speed;

// Input:7
	float n_out7p0 = TIME;

// ScalarOp:9
	float n_out9p0 = n_out8p0 * n_out7p0;

// ScalarOp:16
	float n_in16p1 = -1.00000;
	float n_out16p0 = n_out9p0 * n_in16p1;

// VectorCompose:11
	float n_in11p0 = 0.00000;
	float n_in11p2 = 0.00000;
	vec3 n_out11p0 = vec3(n_in11p0, n_out16p0, n_in11p2);

// Input:2
	vec3 n_out2p0 = vec3(SCREEN_UV, 0.0);

// VectorOp:10
	vec3 n_out10p0 = n_out11p0 + n_out2p0;

// Texture:4
	vec4 tex_frg_4_read = texture(tex_frg_4, n_out10p0.xy);
	vec3 n_out4p0 = tex_frg_4_read.rgb;
	float n_out4p1 = tex_frg_4_read.a;

// VectorCompose:12
	float n_in12p0 = 0.00000;
	float n_in12p2 = 0.00000;
	vec3 n_out12p0 = vec3(n_in12p0, n_out9p0, n_in12p2);

// VectorOp:14
	vec3 n_out14p0 = n_out2p0 + n_out12p0;

// Texture:13
	vec4 tex_frg_13_read = texture(tex_frg_13, n_out14p0.xy);
	vec3 n_out13p0 = tex_frg_13_read.rgb;
	float n_out13p1 = tex_frg_13_read.a;

// VectorOp:6
	vec3 n_out6p0 = n_out4p0 + n_out13p0;

// VectorSmoothStep:15
	vec3 n_in15p0 = vec3(0.95000, 0.95000, 0.95000);
	vec3 n_in15p1 = vec3(1.90000, 1.90000, 1.90000);
	vec3 n_out15p0 = smoothstep(n_in15p0, n_in15p1, n_out6p0);

// Input:17

// Texture:18
	vec3 n_out18p0;
	float n_out18p1;
	{
		vec4 _tex_read = texture(TEXTURE , UV.xy);
		n_out18p0 = _tex_read.rgb;
		n_out18p1 = _tex_read.a;
	}

// VectorScalarMix:21
	vec3 n_out21p0 = mix(n_out15p0, n_out18p0, n_out18p1);

// VectorOp:23
	vec3 n_in23p1 = vec3(1.20000, 1.20000, 1.20000);
	vec3 n_out23p0 = n_out15p0 * n_in23p1;

// ScalarOp:24
	float n_in24p1 = 0.30000;
	float n_out24p0 = n_out18p1 + n_in24p1;

// ScalarOp:22
	float n_out22p0 = dot(n_out23p0, vec3(0.333333, 0.333333, 0.333333)) + n_out24p0;

// ScalarClamp:25
	float n_in25p1 = 0.00000;
	float n_in25p2 = 1.00000;
	float n_out25p0 = clamp(n_out22p0, n_in25p1, n_in25p2);

// BooleanUniform:55
	bool n_out55p0 = Limit;

// Input:41
	vec3 n_out41p0 = vec3(SCREEN_UV, 0.0);

// VectorDecompose:43
	float n_out43p0 = n_out41p0.x;
	float n_out43p1 = n_out41p0.y;
	float n_out43p2 = n_out41p0.z;

// Compare:52
	float n_in52p1 = 0.97000;
	bool n_out52p0 = n_out43p1<n_in52p1;

// ScalarSwitch:53
	float n_in53p1 = 1.00000;
	float n_in53p2 = 0.00000;
	float n_out53p0;
	if(n_out52p0)
	{
		n_out53p0 = n_in53p1;
	}
	else
	{
		n_out53p0 = n_in53p2;
	}

// Compare:45
	float n_in45p1 = 0.34000;
	bool n_out45p0 = n_out43p0>n_in45p1;

// ScalarSwitch:49
	float n_in49p1 = 1.00000;
	float n_in49p2 = 0.00000;
	float n_out49p0;
	if(n_out45p0)
	{
		n_out49p0 = n_in49p1;
	}
	else
	{
		n_out49p0 = n_in49p2;
	}

// Compare:46
	float n_in46p1 = 0.60000;
	bool n_out46p0 = n_out43p0<n_in46p1;

// ScalarSwitch:50
	float n_in50p1 = 1.00000;
	float n_in50p2 = 0.00000;
	float n_out50p0;
	if(n_out46p0)
	{
		n_out50p0 = n_in50p1;
	}
	else
	{
		n_out50p0 = n_in50p2;
	}

// ScalarOp:51
	float n_out51p0 = n_out49p0 * n_out50p0;

// ScalarOp:47
	float n_out47p0 = n_out53p0 * n_out51p0;

// ScalarSwitch:56
	float n_in56p2 = 1.00000;
	float n_out56p0;
	if(n_out55p0)
	{
		n_out56p0 = n_out47p0;
	}
	else
	{
		n_out56p0 = n_in56p2;
	}

// ScalarOp:54
	float n_out54p0 = n_out25p0 * n_out56p0;

// ScalarClamp:57
	float n_in57p1 = 0.00000;
	float n_in57p2 = 1.00000;
	float n_out57p0 = clamp(n_out54p0, n_in57p1, n_in57p2);

// Output:0
	COLOR.rgb = n_out21p0;
	COLOR.a = n_out57p0;

}

void light() {
// Output:0

}
"
custom_defines = ""
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 2660, 460 )
nodes/fragment/2/node = SubResource( 12 )
nodes/fragment/2/position = Vector2( -40, 300 )
nodes/fragment/4/node = SubResource( 20 )
nodes/fragment/4/position = Vector2( 700, 60 )
nodes/fragment/6/node = SubResource( 35 )
nodes/fragment/6/position = Vector2( 960, 280 )
nodes/fragment/7/node = SubResource( 36 )
nodes/fragment/7/position = Vector2( -40, 220 )
nodes/fragment/8/node = SubResource( 37 )
nodes/fragment/8/position = Vector2( -40, 120 )
nodes/fragment/9/node = SubResource( 38 )
nodes/fragment/9/position = Vector2( 160, 140 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( 460, 160 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( 440, 0 )
nodes/fragment/12/node = SubResource( 3 )
nodes/fragment/12/position = Vector2( 300, 420 )
nodes/fragment/13/node = SubResource( 6 )
nodes/fragment/13/position = Vector2( 700, 400 )
nodes/fragment/14/node = SubResource( 7 )
nodes/fragment/14/position = Vector2( 500, 440 )
nodes/fragment/15/node = SubResource( 8 )
nodes/fragment/15/position = Vector2( 1140, 260 )
nodes/fragment/16/node = SubResource( 9 )
nodes/fragment/16/position = Vector2( 160, 0 )
nodes/fragment/17/node = SubResource( 10 )
nodes/fragment/17/position = Vector2( 900, 620 )
nodes/fragment/18/node = SubResource( 11 )
nodes/fragment/18/position = Vector2( 1140, 520 )
nodes/fragment/21/node = SubResource( 13 )
nodes/fragment/21/position = Vector2( 1420, 420 )
nodes/fragment/22/node = SubResource( 14 )
nodes/fragment/22/position = Vector2( 1580, 600 )
nodes/fragment/23/node = SubResource( 15 )
nodes/fragment/23/position = Vector2( 1420, 540 )
nodes/fragment/24/node = SubResource( 16 )
nodes/fragment/24/position = Vector2( 1420, 680 )
nodes/fragment/25/node = SubResource( 17 )
nodes/fragment/25/position = Vector2( 1780, 640 )
nodes/fragment/41/node = SubResource( 21 )
nodes/fragment/41/position = Vector2( 1540, 820 )
nodes/fragment/43/node = SubResource( 22 )
nodes/fragment/43/position = Vector2( 1820, 800 )
nodes/fragment/45/node = SubResource( 23 )
nodes/fragment/45/position = Vector2( 2080, 680 )
nodes/fragment/46/node = SubResource( 24 )
nodes/fragment/46/position = Vector2( 2080, 840 )
nodes/fragment/47/node = SubResource( 25 )
nodes/fragment/47/position = Vector2( 2620, 700 )
nodes/fragment/49/node = SubResource( 26 )
nodes/fragment/49/position = Vector2( 2240, 740 )
nodes/fragment/50/node = SubResource( 27 )
nodes/fragment/50/position = Vector2( 2260, 900 )
nodes/fragment/51/node = SubResource( 28 )
nodes/fragment/51/position = Vector2( 2440, 840 )
nodes/fragment/52/node = SubResource( 29 )
nodes/fragment/52/position = Vector2( 2080, 1120 )
nodes/fragment/53/node = SubResource( 30 )
nodes/fragment/53/position = Vector2( 2280, 1120 )
nodes/fragment/54/node = SubResource( 31 )
nodes/fragment/54/position = Vector2( 2320, 520 )
nodes/fragment/55/node = SubResource( 32 )
nodes/fragment/55/position = Vector2( 2300, 640 )
nodes/fragment/56/node = SubResource( 33 )
nodes/fragment/56/position = Vector2( 2800, 640 )
nodes/fragment/57/node = SubResource( 34 )
nodes/fragment/57/position = Vector2( 2480, 520 )
nodes/fragment/connections = PoolIntArray( 8, 0, 9, 0, 7, 0, 9, 1, 2, 0, 10, 1, 10, 0, 4, 0, 11, 0, 10, 0, 9, 0, 12, 1, 2, 0, 14, 0, 12, 0, 14, 1, 14, 0, 13, 0, 13, 0, 6, 1, 6, 0, 15, 2, 9, 0, 16, 0, 16, 0, 11, 1, 17, 0, 18, 2, 18, 1, 21, 2, 18, 0, 21, 1, 4, 0, 6, 0, 15, 0, 21, 0, 15, 0, 23, 0, 23, 0, 22, 0, 24, 0, 22, 1, 22, 0, 25, 0, 18, 1, 24, 0, 41, 0, 43, 0, 43, 0, 45, 0, 43, 0, 46, 0, 45, 0, 49, 0, 46, 0, 50, 0, 49, 0, 51, 0, 50, 0, 51, 1, 52, 0, 53, 0, 43, 1, 52, 0, 51, 0, 47, 1, 25, 0, 54, 0, 53, 0, 47, 0, 55, 0, 56, 0, 47, 0, 56, 1, 56, 0, 54, 1, 21, 0, 0, 0, 54, 0, 57, 0, 57, 0, 0, 1 )

[sub_resource type="ShaderMaterial" id=40]
shader = SubResource( 39 )
shader_param/Speed = 0.025
shader_param/Limit = true

[sub_resource type="Gradient" id=41]
colors = PoolColorArray( 1, 1, 1, 0.811765, 1, 1, 1, 0 )

[sub_resource type="GradientTexture" id=42]
gradient = SubResource( 41 )

[sub_resource type="ParticlesMaterial" id=43]
lifetime_randomness = 0.83
emission_shape = 2
emission_box_extents = Vector3( 14, 14, 1 )
flag_disable_z = true
direction = Vector3( 0, 0, 0 )
spread = 180.0
gravity = Vector3( 0, 0, 0 )
initial_velocity = 2.0
initial_velocity_random = 1.0
orbit_velocity = 0.0
orbit_velocity_random = 0.0
scale = 0.05
color_ramp = SubResource( 42 )

[sub_resource type="Shader" id=44]
code = "shader_type particles;
uniform vec3 direction;
uniform float spread;
uniform float flatness;
uniform float initial_linear_velocity;
uniform float initial_angle;
uniform float angular_velocity;
uniform float orbit_velocity;
uniform float linear_accel;
uniform float radial_accel;
uniform float tangent_accel;
uniform float damping;
uniform float scale;
uniform float hue_variation;
uniform float anim_speed;
uniform float anim_offset;
uniform float initial_linear_velocity_random;
uniform float initial_angle_random;
uniform float angular_velocity_random;
uniform float orbit_velocity_random;
uniform float linear_accel_random;
uniform float radial_accel_random;
uniform float tangent_accel_random;
uniform float damping_random;
uniform float scale_random;
uniform float hue_variation_random;
uniform float anim_speed_random;
uniform float anim_offset_random;
uniform float lifetime_randomness;
uniform float emission_sphere_radius;
uniform vec4 color_value : hint_color;
uniform int trail_divisor;
uniform vec3 gravity;
uniform sampler2D color_ramp;
uniform float max_left;
uniform float max_right;
uniform float max_bottom;
uniform float max_top;


float rand_from_seed(inout uint seed) {
	int k;
	int s = int(seed);
	if (s == 0)
	s = 305420679;
	k = s / 127773;
	s = 16807 * (s - k * 127773) - 2836 * k;
	if (s < 0)
		s += 2147483647;
	seed = uint(s);
	return float(seed % uint(65536)) / 65535.0;
}

float rand_from_seed_m1_p1(inout uint seed) {
	return rand_from_seed(seed) * 2.0 - 1.0;
}

uint hash(uint x) {
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = (x >> uint(16)) ^ x;
	return x;
}

void vertex() {
	uint base_number = NUMBER / uint(trail_divisor);
	uint alt_seed = hash(base_number + uint(1) + RANDOM_SEED);
	float angle_rand = rand_from_seed(alt_seed);
	float scale_rand = rand_from_seed(alt_seed);
	float hue_rot_rand = rand_from_seed(alt_seed);
	float anim_offset_rand = rand_from_seed(alt_seed);
	float pi = 3.14159;
	float degree_to_rad = pi / 180.0;

	bool restart = false;
	if (CUSTOM.y > CUSTOM.w) {
		restart = true;
	}

	if (RESTART || restart) {
		float tex_linear_velocity = 0.0;
		float tex_angle = 0.0;
		float tex_anim_offset = 0.0;
		float spread_rad = spread * degree_to_rad;
		float angle1_rad = atan(direction.y, direction.x) + rand_from_seed_m1_p1(alt_seed) * spread_rad;
		vec3 rot = vec3(cos(angle1_rad), sin(angle1_rad), 0.0);
		VELOCITY = rot * initial_linear_velocity * mix(1.0, rand_from_seed(alt_seed), initial_linear_velocity_random);
		float base_angle = (initial_angle + tex_angle) * mix(1.0, angle_rand, initial_angle_random);
		CUSTOM.x = base_angle * degree_to_rad;
		CUSTOM.y = 0.0;
		CUSTOM.w = (1.0 - lifetime_randomness * rand_from_seed(alt_seed));
		CUSTOM.z = (anim_offset + tex_anim_offset) * mix(1.0, anim_offset_rand, anim_offset_random);
		float s = rand_from_seed(alt_seed) * 2.0 - 1.0;
		float t = rand_from_seed(alt_seed) * 2.0 * pi;
		float radius = emission_sphere_radius * sqrt(1.0 - s * s);
		TRANSFORM[3].xyz = vec3(radius * cos(t), radius * sin(t), emission_sphere_radius * s);
		VELOCITY = (EMISSION_TRANSFORM * vec4(VELOCITY, 0.0)).xyz;
		TRANSFORM = EMISSION_TRANSFORM * TRANSFORM;
		VELOCITY.z = 0.0;
		TRANSFORM[3].z = 0.0;
	} else {
		CUSTOM.y += DELTA / LIFETIME;
		float tex_linear_velocity = 0.0;
		float tex_orbit_velocity = 0.0;
		float tex_angular_velocity = 0.0;
		float tex_linear_accel = 0.0;
		float tex_radial_accel = 0.0;
		float tex_tangent_accel = 0.0;
		float tex_damping = 0.0;
		float tex_angle = 0.0;
		float tex_anim_speed = 0.0;
		float tex_anim_offset = 0.0;
		vec3 force = gravity;
		vec3 pos = TRANSFORM[3].xyz;
		pos.z = 0.0;
		// apply linear acceleration
		force += length(VELOCITY) > 0.0 ? normalize(VELOCITY) * (linear_accel + tex_linear_accel) * mix(1.0, rand_from_seed(alt_seed), linear_accel_random) : vec3(0.0);
		// apply radial acceleration
		vec3 org = EMISSION_TRANSFORM[3].xyz;
		vec3 diff = pos - org;
		force += length(diff) > 0.0 ? normalize(diff) * (radial_accel + tex_radial_accel) * mix(1.0, rand_from_seed(alt_seed), radial_accel_random) : vec3(0.0);
		// apply tangential acceleration;
		force += length(diff.yx) > 0.0 ? vec3(normalize(diff.yx * vec2(-1.0, 1.0)), 0.0) * ((tangent_accel + tex_tangent_accel) * mix(1.0, rand_from_seed(alt_seed), tangent_accel_random)) : vec3(0.0);
		// apply attractor forces
		VELOCITY += force * DELTA;
		if (pos.x > max_right)
		{
			if (VELOCITY.x > 0.0)
			{
				VELOCITY.x = - (VELOCITY.x * 0.8)
			}
		}
		if (pos.x < max_left)
		{
			if (VELOCITY.x < 0.0)
			{
				VELOCITY.x = - (VELOCITY.x * 0.8)
			}
		}
		if (pos.y > max_bottom)
		{
			if (VELOCITY.y > 0.0)
			{
				VELOCITY.y = - (VELOCITY.y * 0.5)
			}
		}
		if (pos.y < max_top)
		{
			if (VELOCITY.y < 0.0)
			{
				VELOCITY.y = - (VELOCITY.y)
			}
		}
		// orbit velocity
		float orbit_amount = (orbit_velocity + tex_orbit_velocity) * mix(1.0, rand_from_seed(alt_seed), orbit_velocity_random);
		if (orbit_amount != 0.0) {
		     float ang = orbit_amount * DELTA * pi * 2.0;
		     mat2 rot = mat2(vec2(cos(ang), -sin(ang)), vec2(sin(ang), cos(ang)));
		     TRANSFORM[3].xy -= diff.xy;
		     TRANSFORM[3].xy += rot * diff.xy;
		}
		if (damping + tex_damping > 0.0) {
			float v = length(VELOCITY);
			float damp = (damping + tex_damping) * mix(1.0, rand_from_seed(alt_seed), damping_random);
			v -= damp * DELTA;
			if (v < 0.0) {
				VELOCITY = vec3(0.0);
			} else {
				VELOCITY = normalize(VELOCITY) * v;
			}
		}
		float base_angle = (initial_angle + tex_angle) * mix(1.0, angle_rand, initial_angle_random);
		base_angle += CUSTOM.y * LIFETIME * (angular_velocity + tex_angular_velocity) * mix(1.0, rand_from_seed(alt_seed) * 2.0 - 1.0, angular_velocity_random);
		CUSTOM.x = base_angle * degree_to_rad;
		CUSTOM.z = (anim_offset + tex_anim_offset) * mix(1.0, anim_offset_rand, anim_offset_random) + CUSTOM.y * (anim_speed + tex_anim_speed) * mix(1.0, rand_from_seed(alt_seed), anim_speed_random);
	}
	float tex_scale = 1.0;
	float tex_hue_variation = 0.0;
	float hue_rot_angle = (hue_variation + tex_hue_variation) * pi * 2.0 * mix(1.0, hue_rot_rand * 2.0 - 1.0, hue_variation_random);
	float hue_rot_c = cos(hue_rot_angle);
	float hue_rot_s = sin(hue_rot_angle);
	mat4 hue_rot_mat = mat4(vec4(0.299, 0.587, 0.114, 0.0),
			vec4(0.299, 0.587, 0.114, 0.0),
			vec4(0.299, 0.587, 0.114, 0.0),
			vec4(0.000, 0.000, 0.000, 1.0)) +
		mat4(vec4(0.701, -0.587, -0.114, 0.0),
			vec4(-0.299, 0.413, -0.114, 0.0),
			vec4(-0.300, -0.588, 0.886, 0.0),
			vec4(0.000, 0.000, 0.000, 0.0)) * hue_rot_c +
		mat4(vec4(0.168, 0.330, -0.497, 0.0),
			vec4(-0.328, 0.035,  0.292, 0.0),
			vec4(1.250, -1.050, -0.203, 0.0),
			vec4(0.000, 0.000, 0.000, 0.0)) * hue_rot_s;
	COLOR = hue_rot_mat * textureLod(color_ramp, vec2(CUSTOM.y, 0.0), 0.0);

	if (length(VELOCITY) > 0.0) {
		TRANSFORM[1].xyz = normalize(VELOCITY);
	} else {
		TRANSFORM[1].xyz = normalize(TRANSFORM[1].xyz);
	}
	TRANSFORM[0].xyz = normalize(cross(TRANSFORM[1].xyz, TRANSFORM[2].xyz));
	TRANSFORM[2] = vec4(0.0, 0.0, 1.0, 0.0);
	float base_scale = tex_scale * mix(scale, 1.0, scale_random * scale_rand);
	if (base_scale < 0.000001) {
		base_scale = 0.000001;
	}
	TRANSFORM[0].xyz *= base_scale;
	TRANSFORM[1].xyz *= base_scale;
	TRANSFORM[2].xyz *= base_scale;
	VELOCITY.z = 0.0;
	TRANSFORM[3].z = 0.0;
	if (CUSTOM.y > CUSTOM.w) {		ACTIVE = false;
	}
}

"
custom_defines = ""

[sub_resource type="Gradient" id=45]
offsets = PoolRealArray( 0.311111, 1 )
colors = PoolColorArray( 1, 0.968627, 0.815686, 1, 1, 0.305882, 0, 0 )

[sub_resource type="GradientTexture" id=46]
gradient = SubResource( 45 )

[sub_resource type="ShaderMaterial" id=47]
render_priority = 2
shader = SubResource( 44 )
shader_param/direction = Vector3( 0, 0, 0 )
shader_param/spread = 180.0
shader_param/flatness = 0.0
shader_param/initial_linear_velocity = 700.0
shader_param/initial_angle = 0.0
shader_param/angular_velocity = 0.0
shader_param/orbit_velocity = 0.0
shader_param/linear_accel = 0.0
shader_param/radial_accel = 0.0
shader_param/tangent_accel = 0.0
shader_param/damping = 100.0
shader_param/scale = 0.12
shader_param/hue_variation = 0.0
shader_param/anim_speed = 0.0
shader_param/anim_offset = 0.0
shader_param/initial_linear_velocity_random = 0.89
shader_param/initial_angle_random = 0.0
shader_param/angular_velocity_random = 0.0
shader_param/orbit_velocity_random = 0.0
shader_param/linear_accel_random = 0.0
shader_param/radial_accel_random = 0.0
shader_param/tangent_accel_random = 0.0
shader_param/damping_random = 0.56
shader_param/scale_random = 0.0
shader_param/hue_variation_random = 0.0
shader_param/anim_speed_random = 0.0
shader_param/anim_offset_random = 0.0
shader_param/lifetime_randomness = 1.0
shader_param/emission_sphere_radius = 2.34
shader_param/color_value = Color( 1, 1, 1, 1 )
shader_param/trail_divisor = 1
shader_param/gravity = Vector3( 0, 980, 0 )
shader_param/max_left = null
shader_param/max_right = null
shader_param/max_bottom = null
shader_param/max_top = null
shader_param/color_ramp = SubResource( 46 )

[node name="Block" type="Node2D" groups=[
"Block",
]]
modulate = Color( 0.788235, 0.788235, 0.788235, 1 )
light_mask = 0
script = ExtResource( 2 )

[node name="ColorRect" type="ColorRect" parent="."]
visible = false
modulate = Color( 2, 2, 2, 1 )
light_mask = 0
margin_left = -16.0
margin_top = -16.0
margin_right = 16.0
margin_bottom = 16.0
color = Color( 0.898039, 0.902022, 1, 0.694118 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Sprite" type="Sprite" parent="."]
light_mask = 7
material = SubResource( 40 )
scale = Vector2( 0.5, 0.5 )
texture = ExtResource( 1 )
normal_map = ExtResource( 3 )

[node name="ExplodeTimer" type="Timer" parent="."]
one_shot = true

[node name="MoveTimer" type="Timer" parent="."]
one_shot = true

[node name="Tween" type="Tween" parent="."]

[node name="DustParticles" type="Particles2D" parent="."]
z_index = 1
emitting = false
amount = 80
lifetime = 0.6
one_shot = true
explosiveness = 1.0
local_coords = false
process_material = SubResource( 43 )
texture = ExtResource( 6 )

[node name="ExplosionParticles" type="Particles2D" parent="."]
modulate = Color( 10, 10, 10, 1 )
z_index = 1
emitting = false
amount = 40
lifetime = 2.0
one_shot = true
explosiveness = 0.99
local_coords = false
process_material = SubResource( 47 )
texture = ExtResource( 5 )

[node name="Light2D" type="Light2D" parent="."]
z_index = 1
enabled = false
texture = ExtResource( 4 )
texture_scale = 4.0
color = Color( 1, 0.984314, 0.831373, 1 )
energy = 3.0

[node name="ExplosionSound" type="AudioStreamPlayer2D" parent="."]
stream = ExtResource( 7 )
volume_db = 1.384
bus = "Reverb"

[node name="RetractSound" type="AudioStreamPlayer2D" parent="."]
stream = ExtResource( 8 )
bus = "Reverb"

[node name="MoveSound" type="AudioStreamPlayer2D" parent="."]
stream = ExtResource( 9 )
bus = "Reverb"
[connection signal="timeout" from="MoveTimer" to="." method="_on_MoveTimer_timeout"]
