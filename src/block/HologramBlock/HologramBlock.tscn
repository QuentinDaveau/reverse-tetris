[gd_scene load_steps=69 format=2]

[ext_resource path="res://assets/sprites/block.png" type="Texture" id=1]
[ext_resource path="res://assets/sprites/block_n.png" type="Texture" id=2]
[ext_resource path="res://src/block/HologramBlock/hologram_block.gd" type="Script" id=3]
[ext_resource path="res://assets/sounds/brick_shoot.wav" type="AudioStream" id=4]
[ext_resource path="res://assets/sounds/brick_move.wav" type="AudioStream" id=5]

[sub_resource type="VisualShaderNodeInput" id=1]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorDecompose" id=2]

[sub_resource type="VisualShaderNodeScalarOp" id=3]
operator = 4

[sub_resource type="VisualShaderNodeScalarConstant" id=4]
constant = 0.05

[sub_resource type="VisualShaderNodeScalarOp" id=5]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 0.05 ]
operator = 9

[sub_resource type="VisualShaderNodeScalarOp" id=6]
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 3

[sub_resource type="VisualShaderNodeScalarOp" id=7]
default_input_values = [ 0, 0.0, 1, 4.0 ]
operator = 3

[sub_resource type="VisualShaderNodeVectorCompose" id=8]

[sub_resource type="VisualShaderNodeVectorOp" id=9]
operator = 1

[sub_resource type="VisualShaderNodeInput" id=10]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarOp" id=11]
operator = 2

[sub_resource type="VisualShaderNodeScalarFunc" id=12]
function = 0

[sub_resource type="VisualShaderNodeScalarOp" id=13]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=14]

[sub_resource type="VisualShaderNodeVectorCompose" id=15]

[sub_resource type="VisualShaderNodeScalarOp" id=16]

[sub_resource type="VisualShaderNodeScalarOp" id=17]
operator = 3

[sub_resource type="VisualShaderNodeScalarOp" id=18]
default_input_values = [ 0, 0.0, 1, -0.995 ]
operator = 9

[sub_resource type="VisualShaderNodeScalarConstant" id=19]
constant = 100.0

[sub_resource type="VisualShaderNodeScalarOp" id=20]
operator = 2

[sub_resource type="VisualShaderNodeScalarFunc" id=21]
function = 0

[sub_resource type="VisualShaderNodeScalarOp" id=22]
output_port_for_preview = 0
operator = 9

[sub_resource type="VisualShaderNodeInput" id=23]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarClamp" id=24]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 0.7, 2, 1.0 ]

[sub_resource type="VisualShaderNodeScalarOp" id=25]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=26]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarConstant" id=27]
constant = -0.05

[sub_resource type="VisualShaderNodeScalarOp" id=28]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=29]

[sub_resource type="VisualShaderNodeScalarOp" id=30]
default_input_values = [ 0, 0.0, 1, 1.1 ]
operator = 3

[sub_resource type="VisualShaderNodeScalarOp" id=31]
operator = 1

[sub_resource type="VisualShaderNodeInput" id=32]
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeVectorDecompose" id=33]

[sub_resource type="VisualShaderNodeCompare" id=34]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 0.109, 2, 1e-05 ]
function = 2

[sub_resource type="VisualShaderNodeScalarSwitch" id=35]

[sub_resource type="VisualShaderNodeScalarOp" id=36]
operator = 2

[sub_resource type="VisualShaderNodeCompare" id=37]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 0.34, 2, 1e-05 ]
function = 2

[sub_resource type="VisualShaderNodeScalarSwitch" id=38]

[sub_resource type="VisualShaderNodeScalarOp" id=39]
operator = 2

[sub_resource type="VisualShaderNodeCompare" id=40]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 0.6, 2, 1e-05 ]
function = 4

[sub_resource type="VisualShaderNodeScalarSwitch" id=41]

[sub_resource type="VisualShaderNodeScalarOp" id=42]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeScalarSwitch" id=43]
default_input_values = [ 0, false, 1, 1.0, 2, 1.0 ]

[sub_resource type="VisualShaderNodeBooleanUniform" id=44]
uniform_name = "Limit"

[sub_resource type="VisualShaderNodeTexture" id=45]
source = 2

[sub_resource type="VisualShaderNodeInput" id=46]
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeScalarOp" id=47]
default_input_values = [ 0, 0.0, 1, 8.0 ]
operator = 2

[sub_resource type="VisualShaderNodeVectorDecompose" id=48]

[sub_resource type="VisualShaderNodeScalarConstant" id=49]
constant = 0.3

[sub_resource type="VisualShaderNodeScalarConstant" id=50]
constant = 0.06

[sub_resource type="VisualShaderNodeScalarConstant" id=51]
constant = 3.05

[sub_resource type="VisualShaderNodeScalarOp" id=52]
default_input_values = [ 0, 0.0, 1, 0.5 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=53]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=54]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarFunc" id=55]
function = 0

[sub_resource type="VisualShaderNodeScalarOp" id=56]
operator = 9

[sub_resource type="VisualShaderNodeScalarOp" id=57]

[sub_resource type="VisualShaderNodeInput" id=58]
input_name = "vertex"

[sub_resource type="VisualShaderNodeVectorDecompose" id=59]

[sub_resource type="VisualShaderNodeVectorCompose" id=60]

[sub_resource type="VisualShaderNodeScalarConstant" id=61]
constant = 100.0

[sub_resource type="VisualShader" id=62]
code = "shader_type canvas_item;
uniform bool Limit;



void vertex() {
// Input:6
	vec3 n_out6p0 = vec3(VERTEX, 0.0);

// VectorDecompose:7
	float n_out7p0 = n_out6p0.x;
	float n_out7p1 = n_out6p0.y;
	float n_out7p2 = n_out6p0.z;

// Scalar:9
	float n_out9p0 = 100.000000;

// Input:2
	float n_out2p0 = TIME;

// ScalarOp:11
	float n_out11p0 = n_out9p0 * n_out2p0;

// ScalarFunc:3
	float n_out3p0 = sin(n_out11p0);

// ScalarOp:4
	float n_in4p1 = 0.00000;
	float n_out4p0 = step(n_out3p0, n_in4p1);

// ScalarOp:10
	float n_in10p1 = 0.50000;
	float n_out10p0 = n_out4p0 * n_in10p1;

// ScalarOp:5
	float n_out5p0 = n_out10p0 + n_out7p1;

// VectorCompose:8
	vec3 n_out8p0 = vec3(n_out7p0, n_out5p0, n_out7p2);

// Output:0
	VERTEX = n_out8p0.xy;

}

void fragment() {
// Input:10
	vec3 n_out10p0 = vec3(UV, 0.0);

// VectorDecompose:11
	float n_out11p0 = n_out10p0.x;
	float n_out11p1 = n_out10p0.y;
	float n_out11p2 = n_out10p0.z;

// Scalar:67
	float n_out67p0 = 0.060000;

// Input:20
	float n_out20p0 = TIME;

// Input:63
	vec3 n_out63p0 = vec3(SCREEN_UV, 0.0);

// VectorDecompose:65
	float n_out65p0 = n_out63p0.x;
	float n_out65p1 = n_out63p0.y;
	float n_out65p2 = n_out63p0.z;

// ScalarOp:64
	float n_in64p1 = 8.00000;
	float n_out64p0 = n_out65p1 * n_in64p1;

// ScalarOp:45
	float n_out45p0 = n_out20p0 - n_out64p0;

// Scalar:68
	float n_out68p0 = 3.050000;

// ScalarOp:22
	float n_out22p0 = n_out45p0 * n_out68p0;

// Scalar:66
	float n_out66p0 = 0.300000;

// ScalarOp:30
	float n_out30p0 = n_out11p1 / n_out66p0;

// ScalarOp:28
	float n_out28p0 = n_out22p0 + n_out30p0;

// ScalarFunc:23
	float n_out23p0 = sin(n_out28p0);

// ScalarOp:31
	float n_in31p1 = -0.99500;
	float n_out31p0 = step(n_out23p0, n_in31p1);

// ScalarOp:25
	float n_out25p0 = n_out67p0 * n_out31p0;

// ScalarOp:26
	float n_out26p0 = n_out11p0 + n_out25p0;

// VectorCompose:27
	vec3 n_out27p0 = vec3(n_out26p0, n_out11p1, n_out11p2);

// Texture:6
	vec3 n_out6p0;
	float n_out6p1;
	{
		vec4 _tex_read = texture(TEXTURE, n_out27p0.xy);
		n_out6p0 = _tex_read.rgb;
		n_out6p1 = _tex_read.a;
	}

// Scalar:40
	float n_out40p0 = -0.050000;

// Input:39
	float n_out39p0 = TIME;

// ScalarOp:41
	float n_out41p0 = n_out40p0 * n_out39p0;

// ScalarOp:42
	float n_out42p0 = n_out41p0 + n_out11p1;

// Scalar:14
	float n_out14p0 = 0.050000;

// ScalarOp:12
	float n_out12p0 = mod(n_out42p0, n_out14p0);

// ScalarOp:16
	float n_in16p1 = 2.00000;
	float n_out16p0 = n_out14p0 / n_in16p1;

// ScalarOp:15
	float n_out15p0 = step(n_out12p0, n_out16p0);

// ScalarOp:17
	float n_in17p1 = 4.00000;
	float n_out17p0 = n_out15p0 / n_in17p1;

// VectorCompose:18
	vec3 n_out18p0 = vec3(n_out17p0, n_out17p0, n_out17p0);

// VectorOp:19
	vec3 n_out19p0 = n_out6p0 - n_out18p0;

// Input:36
	float n_out36p0 = TIME;

// Scalar:32
	float n_out32p0 = 100.000000;

// ScalarOp:33
	float n_out33p0 = n_out36p0 * n_out32p0;

// ScalarFunc:34
	float n_out34p0 = sin(n_out33p0);

// ScalarOp:35
	float n_in35p1 = 0.00000;
	float n_out35p0 = step(n_out34p0, n_in35p1);

// ScalarClamp:37
	float n_in37p1 = 0.70000;
	float n_in37p2 = 1.00000;
	float n_out37p0 = clamp(n_out35p0, n_in37p1, n_in37p2);

// ScalarOp:38
	float n_out38p0 = n_out37p0 * n_out6p1;

// ScalarOp:43
	float n_in43p1 = 1.10000;
	float n_out43p0 = n_out38p0 / n_in43p1;

// BooleanUniform:59
	bool n_out59p0 = Limit;

// Input:47
	vec3 n_out47p0 = vec3(SCREEN_UV, 0.0);

// VectorDecompose:48
	float n_out48p0 = n_out47p0.x;
	float n_out48p1 = n_out47p0.y;
	float n_out48p2 = n_out47p0.z;

// Compare:49
	float n_in49p1 = 0.10900;
	bool n_out49p0 = n_out48p1>n_in49p1;

// ScalarSwitch:50
	float n_in50p1 = 1.00000;
	float n_in50p2 = 0.00000;
	float n_out50p0;
	if(n_out49p0)
	{
		n_out50p0 = n_in50p1;
	}
	else
	{
		n_out50p0 = n_in50p2;
	}

// Compare:55
	float n_in55p1 = 0.60000;
	bool n_out55p0 = n_out48p0<n_in55p1;

// ScalarSwitch:56
	float n_in56p1 = 1.00000;
	float n_in56p2 = 0.00000;
	float n_out56p0;
	if(n_out55p0)
	{
		n_out56p0 = n_in56p1;
	}
	else
	{
		n_out56p0 = n_in56p2;
	}

// Compare:52
	float n_in52p1 = 0.34000;
	bool n_out52p0 = n_out48p0>n_in52p1;

// ScalarSwitch:53
	float n_in53p1 = 1.00000;
	float n_in53p2 = 0.00000;
	float n_out53p0;
	if(n_out52p0)
	{
		n_out53p0 = n_in53p1;
	}
	else
	{
		n_out53p0 = n_in53p2;
	}

// ScalarOp:54
	float n_out54p0 = n_out56p0 * n_out53p0;

// ScalarOp:57
	float n_out57p0 = n_out50p0 * n_out54p0;

// ScalarSwitch:58
	float n_in58p2 = 1.00000;
	float n_out58p0;
	if(n_out59p0)
	{
		n_out58p0 = n_out57p0;
	}
	else
	{
		n_out58p0 = n_in58p2;
	}

// ScalarOp:51
	float n_out51p0 = n_out43p0 * n_out58p0;

// Output:0
	COLOR.rgb = n_out19p0;
	COLOR.a = n_out51p0;

}

void light() {
// Output:0

}
"
custom_defines = ""
graph_offset = Vector2( -621, -414.5 )
mode = 1
flags/light_only = false
nodes/vertex/2/node = SubResource( 54 )
nodes/vertex/2/position = Vector2( -580, 240 )
nodes/vertex/3/node = SubResource( 55 )
nodes/vertex/3/position = Vector2( -220, 160 )
nodes/vertex/4/node = SubResource( 56 )
nodes/vertex/4/position = Vector2( -280, 260 )
nodes/vertex/5/node = SubResource( 57 )
nodes/vertex/5/position = Vector2( 160, 320 )
nodes/vertex/6/node = SubResource( 58 )
nodes/vertex/6/position = Vector2( -500, 380 )
nodes/vertex/7/node = SubResource( 59 )
nodes/vertex/7/position = Vector2( -260, 400 )
nodes/vertex/8/node = SubResource( 60 )
nodes/vertex/8/position = Vector2( 353.091, 385 )
nodes/vertex/9/node = SubResource( 61 )
nodes/vertex/9/position = Vector2( -600, 160 )
nodes/vertex/10/node = SubResource( 52 )
nodes/vertex/10/position = Vector2( -40, 240 )
nodes/vertex/11/node = SubResource( 53 )
nodes/vertex/11/position = Vector2( -420, 120 )
nodes/vertex/connections = PoolIntArray( 3, 0, 4, 0, 6, 0, 7, 0, 7, 2, 8, 2, 8, 0, 0, 0, 4, 0, 10, 0, 10, 0, 5, 0, 9, 0, 11, 0, 2, 0, 11, 1, 11, 0, 3, 0, 5, 0, 8, 1, 7, 0, 8, 0, 7, 1, 5, 1 )
nodes/fragment/0/position = Vector2( 680, 200 )
nodes/fragment/6/node = SubResource( 45 )
nodes/fragment/6/position = Vector2( -320, 180 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -760, -140 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( -580, -100 )
nodes/fragment/12/node = SubResource( 3 )
nodes/fragment/12/position = Vector2( 80, -220 )
nodes/fragment/14/node = SubResource( 4 )
nodes/fragment/14/position = Vector2( -280, -20 )
nodes/fragment/15/node = SubResource( 5 )
nodes/fragment/15/position = Vector2( 280, -200 )
nodes/fragment/16/node = SubResource( 6 )
nodes/fragment/16/position = Vector2( -20, -60 )
nodes/fragment/17/node = SubResource( 7 )
nodes/fragment/17/position = Vector2( 460, -140 )
nodes/fragment/18/node = SubResource( 8 )
nodes/fragment/18/position = Vector2( 460, -20 )
nodes/fragment/19/node = SubResource( 9 )
nodes/fragment/19/position = Vector2( 460, 100 )
nodes/fragment/20/node = SubResource( 10 )
nodes/fragment/20/position = Vector2( -740, -440 )
nodes/fragment/22/node = SubResource( 11 )
nodes/fragment/22/position = Vector2( -120, -400 )
nodes/fragment/23/node = SubResource( 12 )
nodes/fragment/23/position = Vector2( 260, -400 )
nodes/fragment/25/node = SubResource( 13 )
nodes/fragment/25/position = Vector2( 680, -440 )
nodes/fragment/26/node = SubResource( 14 )
nodes/fragment/26/position = Vector2( -640, 60 )
nodes/fragment/27/node = SubResource( 15 )
nodes/fragment/27/position = Vector2( -520, 200 )
nodes/fragment/28/node = SubResource( 16 )
nodes/fragment/28/position = Vector2( 80, -380 )
nodes/fragment/30/node = SubResource( 17 )
nodes/fragment/30/position = Vector2( 0, -560 )
nodes/fragment/31/node = SubResource( 18 )
nodes/fragment/31/position = Vector2( 460, -420 )
nodes/fragment/32/node = SubResource( 19 )
nodes/fragment/32/position = Vector2( -920, 560 )
nodes/fragment/33/node = SubResource( 20 )
nodes/fragment/33/position = Vector2( -660, 500 )
nodes/fragment/34/node = SubResource( 21 )
nodes/fragment/34/position = Vector2( -620, 400 )
nodes/fragment/35/node = SubResource( 22 )
nodes/fragment/35/position = Vector2( -440, 480 )
nodes/fragment/36/node = SubResource( 23 )
nodes/fragment/36/position = Vector2( -905.356, 480.6 )
nodes/fragment/37/node = SubResource( 24 )
nodes/fragment/37/position = Vector2( -220, 480 )
nodes/fragment/38/node = SubResource( 25 )
nodes/fragment/38/position = Vector2( 155.471, 433.6 )
nodes/fragment/39/node = SubResource( 26 )
nodes/fragment/39/position = Vector2( -580, -220 )
nodes/fragment/40/node = SubResource( 27 )
nodes/fragment/40/position = Vector2( -580, -280 )
nodes/fragment/41/node = SubResource( 28 )
nodes/fragment/41/position = Vector2( -340, -280 )
nodes/fragment/42/node = SubResource( 29 )
nodes/fragment/42/position = Vector2( -140, -220 )
nodes/fragment/43/node = SubResource( 30 )
nodes/fragment/43/position = Vector2( 400, 420 )
nodes/fragment/45/node = SubResource( 31 )
nodes/fragment/45/position = Vector2( -520, -460 )
nodes/fragment/47/node = SubResource( 32 )
nodes/fragment/47/position = Vector2( 20, 600 )
nodes/fragment/48/node = SubResource( 33 )
nodes/fragment/48/position = Vector2( 240, 620 )
nodes/fragment/49/node = SubResource( 34 )
nodes/fragment/49/position = Vector2( 540, 600 )
nodes/fragment/50/node = SubResource( 35 )
nodes/fragment/50/position = Vector2( 720, 600 )
nodes/fragment/51/node = SubResource( 36 )
nodes/fragment/51/position = Vector2( 1200, 360 )
nodes/fragment/52/node = SubResource( 37 )
nodes/fragment/52/position = Vector2( 520, 880 )
nodes/fragment/53/node = SubResource( 38 )
nodes/fragment/53/position = Vector2( 800, 900 )
nodes/fragment/54/node = SubResource( 39 )
nodes/fragment/54/position = Vector2( 1040, 780 )
nodes/fragment/55/node = SubResource( 40 )
nodes/fragment/55/position = Vector2( 520, 1140 )
nodes/fragment/56/node = SubResource( 41 )
nodes/fragment/56/position = Vector2( 800, 1120 )
nodes/fragment/57/node = SubResource( 42 )
nodes/fragment/57/position = Vector2( 940, 660 )
nodes/fragment/58/node = SubResource( 43 )
nodes/fragment/58/position = Vector2( 960, 520 )
nodes/fragment/59/node = SubResource( 44 )
nodes/fragment/59/position = Vector2( 720, 500 )
nodes/fragment/63/node = SubResource( 46 )
nodes/fragment/63/position = Vector2( -1200, -620 )
nodes/fragment/64/node = SubResource( 47 )
nodes/fragment/64/position = Vector2( -932, -580 )
nodes/fragment/65/node = SubResource( 48 )
nodes/fragment/65/position = Vector2( -1175, -473 )
nodes/fragment/66/node = SubResource( 49 )
nodes/fragment/66/position = Vector2( -300, -560 )
nodes/fragment/67/node = SubResource( 50 )
nodes/fragment/67/position = Vector2( 620, -560 )
nodes/fragment/68/node = SubResource( 51 )
nodes/fragment/68/position = Vector2( -340, -380 )
nodes/fragment/connections = PoolIntArray( 10, 0, 11, 0, 14, 0, 12, 1, 14, 0, 16, 0, 16, 0, 15, 1, 15, 0, 17, 0, 17, 0, 18, 0, 17, 0, 18, 1, 17, 0, 18, 2, 18, 0, 19, 1, 19, 0, 0, 0, 12, 0, 15, 0, 11, 0, 26, 0, 25, 0, 26, 1, 11, 1, 27, 1, 11, 2, 27, 2, 26, 0, 27, 0, 27, 0, 6, 0, 22, 0, 28, 0, 11, 1, 30, 0, 30, 0, 28, 1, 28, 0, 23, 0, 23, 0, 31, 0, 31, 0, 25, 1, 32, 0, 33, 1, 33, 0, 34, 0, 34, 0, 35, 0, 36, 0, 33, 0, 35, 0, 37, 0, 37, 0, 38, 0, 6, 1, 38, 1, 39, 0, 41, 1, 40, 0, 41, 0, 41, 0, 42, 0, 42, 0, 12, 0, 11, 1, 42, 1, 38, 0, 43, 0, 20, 0, 45, 0, 45, 0, 22, 0, 47, 0, 48, 0, 48, 1, 49, 0, 49, 0, 50, 0, 43, 0, 51, 0, 51, 0, 0, 1, 52, 0, 53, 0, 53, 0, 54, 1, 55, 0, 56, 0, 48, 0, 52, 0, 48, 0, 55, 0, 56, 0, 54, 0, 54, 0, 57, 1, 50, 0, 57, 0, 57, 0, 58, 1, 58, 0, 51, 1, 59, 0, 58, 0, 6, 0, 19, 0, 63, 0, 65, 0, 64, 0, 45, 1, 65, 1, 64, 0, 66, 0, 30, 1, 67, 0, 25, 0, 68, 0, 22, 1 )

[sub_resource type="ShaderMaterial" id=63]
resource_local_to_scene = true
shader = SubResource( 62 )
shader_param/Limit = true

[node name="HologramBlock" type="Node2D"]
script = ExtResource( 3 )

[node name="Sprite" type="Sprite" parent="."]
modulate = Color( 5, 5, 5, 0 )
light_mask = 2
material = SubResource( 63 )
scale = Vector2( 0.5, 0.5 )
texture = ExtResource( 1 )
normal_map = ExtResource( 2 )

[node name="Tween" type="Tween" parent="."]

[node name="ShootSound" type="AudioStreamPlayer2D" parent="."]
stream = ExtResource( 4 )
volume_db = -3.586
bus = "LowReverb"

[node name="MoveSound" type="AudioStreamPlayer2D" parent="."]
stream = ExtResource( 5 )
bus = "LowReverb"
